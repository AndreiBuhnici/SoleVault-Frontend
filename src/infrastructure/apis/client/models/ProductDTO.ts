/* tslint:disable */
/* eslint-disable */
/**
 * SoleVault
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryDTO } from './CategoryDTO';
import {
    CategoryDTOFromJSON,
    CategoryDTOFromJSONTyped,
    CategoryDTOToJSON,
} from './CategoryDTO';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 
 * @export
 * @interface ProductDTO
 */
export interface ProductDTO {
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    stock?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDTO
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    color?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDTO
     */
    imageUrl?: string | null;
    /**
     * 
     * @type {CategoryDTO}
     * @memberof ProductDTO
     */
    category?: CategoryDTO;
    /**
     * 
     * @type {UserDTO}
     * @memberof ProductDTO
     */
    owner?: UserDTO;
    /**
     * 
     * @type {Date}
     * @memberof ProductDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProductDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the ProductDTO interface.
 */
export function instanceOfProductDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductDTOFromJSON(json: any): ProductDTO {
    return ProductDTOFromJSONTyped(json, false);
}

export function ProductDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'stock': !exists(json, 'stock') ? undefined : json['stock'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'color': !exists(json, 'color') ? undefined : json['color'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'category': !exists(json, 'category') ? undefined : CategoryDTOFromJSON(json['category']),
        'owner': !exists(json, 'owner') ? undefined : UserDTOFromJSON(json['owner']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ProductDTOToJSON(value?: ProductDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'price': value.price,
        'stock': value.stock,
        'size': value.size,
        'color': value.color,
        'imageUrl': value.imageUrl,
        'category': CategoryDTOToJSON(value.category),
        'owner': UserDTOToJSON(value.owner),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

