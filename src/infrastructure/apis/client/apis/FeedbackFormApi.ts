/* tslint:disable */
/* eslint-disable */
/**
 * SoleVault
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeedBackFormAddDTO,
  FeedbackFormDTOPagedResponseRequestResponse,
  FeedbackFormDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    FeedBackFormAddDTOFromJSON,
    FeedBackFormAddDTOToJSON,
    FeedbackFormDTOPagedResponseRequestResponseFromJSON,
    FeedbackFormDTOPagedResponseRequestResponseToJSON,
    FeedbackFormDTORequestResponseFromJSON,
    FeedbackFormDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiFeedbackFormAddFeedbackFormPostRequest {
    feedBackFormAddDTO?: FeedBackFormAddDTO;
}

export interface ApiFeedbackFormGetFeedbackFormsGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class FeedbackFormApi extends runtime.BaseAPI {

    /**
     */
    async apiFeedbackFormAddFeedbackFormPostRaw(requestParameters: ApiFeedbackFormAddFeedbackFormPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/FeedbackForm/AddFeedbackForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedBackFormAddDTOToJSON(requestParameters.feedBackFormAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFeedbackFormAddFeedbackFormPost(requestParameters: ApiFeedbackFormAddFeedbackFormPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiFeedbackFormAddFeedbackFormPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFeedbackFormGetFeedbackFormGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedbackFormDTORequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/FeedbackForm/GetFeedbackForm`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFormDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFeedbackFormGetFeedbackFormGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedbackFormDTORequestResponse> {
        const response = await this.apiFeedbackFormGetFeedbackFormGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFeedbackFormGetFeedbackFormsGetRaw(requestParameters: ApiFeedbackFormGetFeedbackFormsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedbackFormDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/FeedbackForm/GetFeedbackForms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackFormDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFeedbackFormGetFeedbackFormsGet(requestParameters: ApiFeedbackFormGetFeedbackFormsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedbackFormDTOPagedResponseRequestResponse> {
        const response = await this.apiFeedbackFormGetFeedbackFormsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
